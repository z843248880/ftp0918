#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Author: zhoujunlong
import socket
import os,json, sys, time
import hashlib

base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


class FtpClient(object):
    def __init__(self):
        self.client = socket.socket()
        self.name = ""
        self.pwd = os.path.join(base_dir, "ftp_server")

    def cmd_help(self, *args):
        '''帮助信息'''
        msg = '''\033[32;1m
        ---------command list---------
        help          # 显示帮助信息
        ls            # 列出当前目录所有文件
        pwd           # 显示当前路径
        cd dir_name   # 切换目录
        disk          # 查看可用空间
        put file_name # 上传文件
        get file_name # 下载文件
        exit          # 关闭并退出当前连接
        \033[;0m'''
        print(msg)

    def acc_login(self):
        '''账户登录'''
        #while True:
        user_name = input("输入用户名 >>：").strip()
        if len(user_name) == 0:
            print("\033[31;1m用户名不能为空\033[;0m")
            #continue
        user_passwd = input("输入密码 >>：").strip()
        acc_data = {
                "action": "acc_login",
                "user_name": user_name,
                "user_passwd": user_passwd
            }
        self.client.send(json.dumps(acc_data).encode())
        server_auth = self.client.recv(1024).decode()
        if server_auth == "True":
            self.name = user_name
            self.pwd = os.path.join(self.pwd, "data", self.name)
            print("self.pwd:::", self.pwd)
                #break
            return True

        else:
            print("\033[31;1m认证失败!!!\033[;0m")
            return False


    def connect(self, ip, port):
        '''连接ftp服务器'''
        self.client.connect((ip, port))

    def view_bar(self, count,  num, total):
        rate = num / total
        rate_num = int(rate * 100)
        r = '\r[%s]%d%%' % ("#" * count, rate_num)
        sys.stdout.write(r)
        sys.stdout.flush()

    def interactive(self):
        '''与ftp服务器进行交互'''
        while True:
            cmd = input(self.pwd+">>:").strip()
            if len(cmd) == 0: continue
            if cmd == "exit": break
            cmd_str = cmd.split()[0]
            if hasattr(self, "cmd_%s" % cmd_str):
                func = getattr(self, "cmd_%s" % cmd_str)
                func(cmd)
            else:
                print("\033[31;1m[%s]命令不存在!!!\033[;0m" % cmd)
                self.cmd_help()

    def deal_with_cmd_and_file(self, obj):
        '''对命令和文件进行处理'''
        obj = list(obj)
        cmd_split = obj[0].split()
        action = cmd_split[0]
        if len(cmd_split) > 1:
            filename = cmd_split[1]
            if os.path.isfile(filename):
                file_size = os.stat(filename).st_size
                m = hashlib.md5()
                msg_dic = {"action": action,
                           "filename": filename,
                           "file_size": file_size,
                           "overridden": True}
                self.client.send(json.dumps(msg_dic).encode())
                server_response = self.client.recv(1024)  # 检测文件存在  返回配额限制
                with open(filename, "rb") as f:
                    i = 0
                    size = 0
                    total_size = os.stat(filename).st_size
                    for line in f:
                        m.update(line)
                        self.client.send(line)
                        if i%900 ==0:
                            self.view_bar(int(i/900), size, total_size)
                            time.sleep(0.1)
                        size += len(line)
                        i += 1
                    else:
                        local_file_md5 = m.hexdigest()
                        server_file_md5 = self.client.recv(1024)
                        if local_file_md5 == server_file_md5.decode():
                            print("\033[32;1m\n文件%s成功^_^\033[;0m" % action)
                        else:
                            print("\033[31;1m文件%s失败!!!\033[;0m" % action)
            else:
                print("\033[31;1m文件 %s 不存在\033[;0m" % filename)
        else:
            print("\033[31;1m%s:缺少文件名\033[;0m" % action)
            print("\033[32;1m%s 用法：&s file_name\033[;0m" % action)

    def cmd_ls(self, *args):
        '''显示当前目录下所有文件'''
        cmd_split = args[0].split()
        if len(cmd_split) == 1:
            msg_dic = {
                "action": "ls"
            }
            self.client.send(json.dumps(msg_dic).encode())
            server_response = self.client.recv(1024)
            print(server_response.decode())
        else:
            print("\033[31;1mls 命令不需要添加参数\033[;0m")

    def cmd_cd(self, *args):
        '''切换路径'''
        cmd_split = args[0].split()
        if len(cmd_split) > 1:
            change_path = cmd_split[1]
            msg_dic = {
                "action": "cd",
                "change_path": change_path,
                "raw_path": self.pwd
            }
            self.client.send(json.dumps(msg_dic).encode())
            server_response = self.client.recv(1024)
            if server_response.decode().startswith('/') or server_response.decode().startswith('C'):
                if change_path == ".." and len(self.pwd) == len(server_response.decode()):print("已到顶级目录")
                self.pwd = server_response.decode()
            else:
                print("\033[31;1m%s\033[;0m" % server_response.decode())
        else:
            print("\033[31;1mcd 命令用法:cd dir_name\033[;0m")

    def cmd_pwd(self, *args):
        '''显示当前路径'''
        cmd_split = args[0].split()
        if len(cmd_split) == 1:
            msg_dic = {
                "action": "pwd"
            }
            self.client.send(json.dumps(msg_dic).encode())
            server_response = self.client.recv(1024)
            print(server_response.decode())
        else:
            print("\033[31;1mls 命令不需要添加参数\033[;0m")

    def cmd_disk(self, *args):
        '''显示磁盘配额'''
        print("可用空间：30M")

    def cmd_put(self, *args):
        '''上传文件'''
        self.deal_with_cmd_and_file(args)

    def cmd_get(self, *args):
        '''下载文件'''
        cmd_split = args[0].split()
        if len(cmd_split) > 1:
            filename = cmd_split[1]
            m = hashlib.md5()
            msg_dic = {"action": "get",
                       "filename": filename
                       }
            self.client.send(json.dumps(msg_dic).encode())
            server_response = self.client.recv(1024).decode() # 检测文件存在  返回配额限制
            print(server_response)
            if server_response.startswith("250"):
                self.client.send(b"tell me file size")
                file_total_size = self.client.recv(1024)
                file_total_size = int(file_total_size.decode())
                self.client.send(b"get the file size")
                if os.path.isfile(filename):
                    f = open(filename+".new", "wb")
                else:
                    f = open(filename, "wb")
                received_size = 0
                i = 0
                while received_size < file_total_size:
                    if file_total_size - received_size > 1024:
                        size = 1024
                    else:
                        size = file_total_size - received_size
                    data = self.client.recv(size)
                    m.update(data)
                    received_size += len(data)
                    if i%800 ==0:
                        self.view_bar(int(i/320),received_size, file_total_size)
                        time.sleep(0.1)
                    f.write(data)
                    i += 1
                else:
                    local_file_md5 = m.hexdigest()
                    server_file_md5 = self.client.recv(1024)
                    if local_file_md5 == server_file_md5.decode():
                        print("\033[32;1m\n文件下载成功^_^\033[;0m")
                    else:
                        print("\033[32;1m\n文件下载失败!!!\033[;0m")
            else:
                print("\033[31;1m文件 %s 不存在\033[;0m" % filename)
        else:
            print("\033[31;1mget:缺少文件名\033[;0m")
            print("\033[32;1mget 用法：get file_name\033[;0m")


if __name__ == '__main__':
    ftp = FtpClient()
    ftp.connect("localhost", 5555)
    if ftp.acc_login():
        ftp.interactive()

